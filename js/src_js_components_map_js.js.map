{"version":3,"file":"js/src_js_components_map_js.js","mappings":";;;;;;;;;;;;;;;AAAA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,UAAU;AAC/B;;AAEA,qBAAqB,UAAU;AAC/B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAiD;AAC/E;AACA;AACA,kBAAkB,uLAAuL;AACzM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,8BAA8B,MAAM,wCAAwC;AACvK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA,2BAA2B,YAAY;AACvC;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA,4CAA4C,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,OAAO;AACjF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4C;AAC5C;;;;;;;;;;;;;;;;AC9TA;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAEP;AAAA,MADJC,IACI,uEADG,SACH;AACJ,MAAMC,KAAK,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,IAA1B,CAAd;;AACA,MAAIC,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACrBH,IAAAA,KAAK,CAACI,OAAN,CAAc,UAACC,EAAD,EAAQ;AACrB,UAAMC,QAAQ,GAAGC,UAAU,CAACF,EAAE,CAACG,OAAH,CAAWC,GAAZ,CAA3B;AACA,UAAMC,QAAQ,GAAGH,UAAU,CAACF,EAAE,CAACG,OAAH,CAAWG,GAAZ,CAA3B;AACA,UAAMC,aAAa,GAAGP,EAAE,CAACG,OAAH,CAAWK,SAAjC;;AAEA,UAAI,CAACC,MAAM,CAACC,KAAP,CAAaT,QAAb,CAAD,IAA2B,CAACQ,MAAM,CAACC,KAAP,CAAaL,QAAb,CAAhC,EAAwD;AACvD,YAAMM,MAAM,GAAG,IAAInB,6DAAJ,CAAW;AACzBoB,UAAAA,MAAM,EAAEZ,EAAE,CAACG,OAAH,CAAWU,GADM;AAEzBC,UAAAA,OAAO,EAAE,QAFgB;AAGzBC,UAAAA,SAAS,EAAE,CAAC,QAAD;AAHc,SAAX,CAAf;AAMA,YAAMC,UAAU,GAAG;AAClBC,UAAAA,MAAM,EAAE;AACPb,YAAAA,GAAG,EAAEH,QADE;AAEPK,YAAAA,GAAG,EAAED;AAFE,WADU;AAKlBa,UAAAA,IAAI,EAAEhB,UAAU,CAACF,EAAE,CAACG,OAAH,CAAWe,IAAZ,CALE;AAMlBC,UAAAA,gBAAgB,EAAE,IANA;AAOlBC,UAAAA,MAAM,EAAE,CAAC;AACRC,YAAAA,OAAO,EAAE,CAAC;AACTC,cAAAA,UAAU,EAAE,CAAC;AADJ,aAAD;AADD,WAAD;AAPU,SAAnB;AAcAX,QAAAA,MAAM,CACJY,IADF,GAEEC,IAFF,CAEO,UAACC,MAAD,EAAY;AACjB,cAAIhC,GAAG,GAAG,IAAIgC,MAAM,CAAC/B,IAAP,CAAYgC,GAAhB,CAAoB1B,EAApB,EAAwBgB,UAAxB,CAAV;AACA,cAAMW,MAAM,GAAG,IAAIF,MAAM,CAAC/B,IAAP,CAAYkC,MAAhB,CAAuB;AACrCC,YAAAA,QAAQ,EAAE,IAAIJ,MAAM,CAAC/B,IAAP,CAAYoC,MAAhB,CAAuB7B,QAAvB,EAAiCI,QAAjC,CAD2B;AAErC0B,YAAAA,IAAI,EAAE;AACLC,cAAAA,GAAG,EAAEzB,aADA;AAEL0B,cAAAA,IAAI,EAAE,IAAIR,MAAM,CAAC/B,IAAP,CAAYwC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AAFD,aAF+B;AAMrCzC,YAAAA,GAAG,EAAHA,GANqC;AAOrCwC,YAAAA,IAAI,EAAE,IAAIR,MAAM,CAAC/B,IAAP,CAAYwC,IAAhB,CAAqB,CAArB,EAAwB,CAAxB;AAP+B,WAAvB,CAAf;AASA,SAbF,EAeEC,KAfF,CAeQ,UAAAC,CAAC,EAAI;AACXC,UAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,SAjBF;AAkBA;AACD,KA7CD;AA8CA;AACD,CApDD;;AAsDA,iEAAe3C,GAAf","sources":["webpack:///./node_modules/@googlemaps/js-api-loader/dist/index.esm.js","webpack:///./src/js/components/map.js"],"sourcesContent":["// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */\nvar LoaderStatus;\n(function (LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nclass Loader {\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */\n    constructor({ apiKey, authReferrerPolicy, channel, client, id = DEFAULT_ID, language, libraries = [], mapIds, nonce, region, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", version, }) {\n        this.CALLBACK = \"__googleMapsCallback\";\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.apiKey = apiKey;\n        this.authReferrerPolicy = authReferrerPolicy;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.language = language;\n        this.libraries = libraries;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.region = region;\n        this.retries = retries;\n        this.url = url;\n        this.version = version;\n        if (Loader.instance) {\n            if (!fastDeepEqual(this.options, Loader.instance.options)) {\n                throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     */\n    createUrl() {\n        let url = this.url;\n        url += `?callback=${this.CALLBACK}`;\n        if (this.apiKey) {\n            url += `&key=${this.apiKey}`;\n        }\n        if (this.channel) {\n            url += `&channel=${this.channel}`;\n        }\n        if (this.client) {\n            url += `&client=${this.client}`;\n        }\n        if (this.libraries.length > 0) {\n            url += `&libraries=${this.libraries.join(\",\")}`;\n        }\n        if (this.language) {\n            url += `&language=${this.language}`;\n        }\n        if (this.region) {\n            url += `&region=${this.region}`;\n        }\n        if (this.version) {\n            url += `&v=${this.version}`;\n        }\n        if (this.mapIds) {\n            url += `&map_ids=${this.mapIds.join(\",\")}`;\n        }\n        if (this.authReferrerPolicy) {\n            url += `&auth_referrer_policy=${this.authReferrerPolicy}`;\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     */\n    load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     */\n    loadPromise() {\n        return new Promise((resolve, reject) => {\n            this.loadCallback((err) => {\n                if (!err) {\n                    resolve(window.google);\n                }\n                else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     */\n    loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */\n    setScript() {\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const url = this.createUrl();\n        const script = document.createElement(\"script\");\n        script.id = this.id;\n        script.type = \"text/javascript\";\n        script.src = url;\n        script.onerror = this.loadErrorCallback.bind(this);\n        script.defer = true;\n        script.async = true;\n        if (this.nonce) {\n            script.nonce = this.nonce;\n        }\n        document.head.appendChild(script);\n    }\n    /**\n     * Reset the loader state.\n     */\n    reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.log(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n            setTimeout(() => {\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        }\n        else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    setCallback() {\n        window.__googleMapsCallback = this.callback.bind(this);\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb) => {\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.done) {\n            this.callback();\n        }\n        else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n                    \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            if (this.loading) ;\n            else {\n                this.loading = true;\n                this.setCallback();\n                this.setScript();\n            }\n        }\n    }\n}\n\nexport { DEFAULT_ID, Loader, LoaderStatus };\n//# sourceMappingURL=index.esm.js.map\n","import { Loader } from '@googlemaps/js-api-loader';\r\n\r\nconst map = (\r\n\tmaps = '.js-map',\r\n) => {\r\n\tconst $maps = document.querySelectorAll(maps);\r\n\tif ($maps.length > 0) {\r\n\t\t$maps.forEach((el) => {\r\n\t\t\tconst latValue = parseFloat(el.dataset.lat);\r\n\t\t\tconst lngValue = parseFloat(el.dataset.lng);\r\n\t\t\tconst markerDataUrl = el.dataset.markerUrl;\r\n\r\n\t\t\tif (!Number.isNaN(latValue) && !Number.isNaN(lngValue)) {\r\n\t\t\t\tconst loader = new Loader({\r\n\t\t\t\t\tapiKey: el.dataset.key,\r\n\t\t\t\t\tversion: 'weekly',\r\n\t\t\t\t\tlibraries: ['places'],\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst mapOptions = {\r\n\t\t\t\t\tcenter: {\r\n\t\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\t\tlng: lngValue,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tzoom: parseFloat(el.dataset.zoom),\r\n\t\t\t\t\tdisableDefaultUI: true,\r\n\t\t\t\t\tstyles: [{\r\n\t\t\t\t\t\tstylers: [{\r\n\t\t\t\t\t\t\tsaturation: -100,\r\n\t\t\t\t\t\t}],\r\n\t\t\t\t\t}],\r\n\t\t\t\t};\r\n\r\n\t\t\t\tloader\r\n\t\t\t\t\t.load()\r\n\t\t\t\t\t.then((google) => {\r\n\t\t\t\t\t\tlet map = new google.maps.Map(el, mapOptions);\r\n\t\t\t\t\t\tconst marker = new google.maps.Marker({\r\n\t\t\t\t\t\t\tposition: new google.maps.LatLng(latValue, lngValue),\r\n\t\t\t\t\t\t\ticon: {\r\n\t\t\t\t\t\t\t\turl: markerDataUrl,\r\n\t\t\t\t\t\t\t\tsize: new google.maps.Size(32, 56),\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tmap,\r\n\t\t\t\t\t\t\tsize: new google.maps.Size(5, 5),\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default map;\r\n"],"names":["Loader","map","maps","$maps","document","querySelectorAll","length","forEach","el","latValue","parseFloat","dataset","lat","lngValue","lng","markerDataUrl","markerUrl","Number","isNaN","loader","apiKey","key","version","libraries","mapOptions","center","zoom","disableDefaultUI","styles","stylers","saturation","load","then","google","Map","marker","Marker","position","LatLng","icon","url","size","Size","catch","e","console","log"],"sourceRoot":""}